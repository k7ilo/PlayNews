#!/bin/bash
#
# CHECK FOR THE playnews.ini FILE -------------------------------------------------------------------------------------------------------------
script_dir=$(dirname "$0")
if [ ! -f "$script_dir/playnews.ini" ]
     then
        echo -e "\nplaynews.ini file missing\n"
        exit
     else
        source "$script_dir/playnews.ini"
fi




# SET THE FOLLOWING VARIABLES FOR THIS PARTICULAR INSTALL -------------------------------------------------------------------------------------
#
# VOICEDIR - Directory for playnews voice files
VOICEDIR="$script_dir/audio_files"

# TMPDIR - Directory for temporary file storage
TMPDIR="$script_dir/audio_tmp" 
# End User defines




# CHECK FOR THE PLAYNEWS VOICE FILES ----------------------------------------------------------------------------------------------------------
if [ ! -f $VOICEDIR/ARNstart ]
  then
    echo "playnews voice files not found - check VOICEDIR in script"
    exit 1
fi




# CONFIGURE COMMAND FORMAT --------------------------------------------------------------------------------------------------------------------
#
# --- NEWSTYPE is either ARRL or ARN. Always required as parameter 1
if [ -z "$1" ]
  then
     echo "No Play type given - ARN or ARRL"
     exit 1
  else
     NEWSTYPE=${1^^}
     if [ "$NEWSTYPE" != "ARN" ] && [ "$NEWSTYPE" != "ARRL" ]
        then 
           echo "Play type must be ARRL or ARN"
           exit 1
     fi
fi

# --- Node number to play on or from
if [[ ! $3 =~ ^-?[0-9]+$ ]]
  then
    echo "Node number required" 
    exit 1
  else
     NODE=$3
fi

# --- Mode - 'localplay' or 'playback' (global)
#     'localplay' only plays on the node specified
#     'playback' plays on the specified node and ALL nodes connected to it
#
if [ -z $4 ]
   then 
     MODE="playback"
   elif
     [ ${4^^} == "L" ]
       then
         MODE="localplay"
   elif
     [ ${4^^} == "G" ]
       then
         MODE="playback"
   else
     echo "Wrong mode type - L for Local play, G or null for global play"
     exit 1
fi

if [ $MODE == "playback" ]
   then
     MODETYPE="(global)"
   else
     MODETYPE="(local)"
fi

# --- Time to start - 24 hour time - required 2nd command line parameter
#     Time example 03:19 = 3:19 AM, 22:45 = 10:45 PM 
if [ ${2^^} != "NOW" ] && [[ !  $2 =~ ^[0-9][0-9]:[0-9][0-9]$ ]]
  then
    echo "No Time supplied - Enter 24 hour time to play as 00:00 - (7 PM = 19:00)"
    exit 1
fi
TIME=$2




# AUDIO DOWNLOAD, DIVISION AND CONVERSION -----------------------------------------------------------------------------------------------------
#
# --- Download Newsline or ARRL  and convert to wav
rm -f $TMPDIR/news.mp3
echo "Starting Download of $NEWSTYPE Audio News @ $(date +%H:%M:%S)"

# --- ARN_URL and ARRL_URL are set in playnews.ini
if [ $NEWSTYPE == "ARN" ]
  then 
# --- Timeout set to 15 seconds with 4 retries. Set the timeout longer for slow circuits.
     wget -T 15 --tries=4 -O $TMPDIR/news.mp3 $ARN_URL 
  else
# --- not ARN so get ARRL
     wget -T 15 --tries=4 -O $TMPDIR/news.mp3 $ARRL_URL
fi

if [ -f $TMPDIR/news.mp3 ];
 then
 echo "Download complete @ $(date +%H:%M:%S)"
else
 echo "Download failed"
 exit 0
fi

# --- On holidays ARRL does not put out a news MP3. Instead there is a 
#     shorter HTML file. The following routine checks for this and
#     exits if there is no valid MP3 file.
filesize=$(wc -c <$TMPDIR/news.mp3)
if [ $filesize -lt 100000 ]
 then
    echo "File size too small for play"
    exit 0
fi

# --- Convert downloaded .mp3 file to .wav format
echo "Converting from MP3 to .wav"
lame -h --decode $TMPDIR/news.mp3 $TMPDIR/news2.wav &> /dev/null 2>&1

# --- Get the length of the file in seconds
LENGTH=`soxi -D $TMPDIR/news2.wav`
#echo $LENGTH
START=0

# --- 2.5 minute = 150 seconds
INCREMENT=150

# --- Calculate number of segments
MAXPART=`echo $LENGTH/$INCREMENT | bc` 
let "MAXPART += 1"
PART="1"
#echo $MAXPART

# --- Divide into 2.5 minute segments
while [ "$PART" -le "$MAXPART" ]; do
      sox --temp $TMPDIR $TMPDIR/news2.wav $TMPDIR/news.part$PART.wav trim $START $INCREMENT &> /dev/null 2>&1
      echo "Creating $TMPDIR/news.part$PART.wav"
      START=$(($START-5+$INCREMENT))
#     echo "$PART - $START - $INCREMENT  $(($START+$INCREMENT))"
      let "PART += 1"
done

# --- Convert each segment to ulaw format
PART="1"
while [ "$PART" -le "$MAXPART" ]; do
      sox --temp $TMPDIR -V $TMPDIR/news.part$PART.wav -r 8000 -c 1 -t ul $TMPDIR/news.part$PART.ul &> /dev/null 2>&1
      echo "Converting to $TMPDIR/news.part$PART.ul"
      rm $TMPDIR/news.part$PART.wav
      let "PART += 1"
done




# BROADCAST -----------------------------------------------------------------------------------------------------------------------------------
if [ ${TIME^^} != "NOW" ]
then

echo "$NEWSTYPE news will start at $TIME and use $MODE $MODETYPE mode on"
echo "node - $NODE  with 5 and 10 minute pre-warnings"
 
# --- Last warning time - 5 minutes before
TIME5=`date --date "$TIME now 5 minutes ago" +%H:%M`
# --- First warning time - 10 minutes before
TIME10=`date --date "$TIME now 10 minutes ago" +%H:%M`

# --- Waiting to send 10 minute announcement
echo "Waiting to send 10 minute warning"
while [ $(date +%H:%M) != $TIME10 ]; do sleep 1; done
   # Start 10 minute message, add 3 second delay to beginning
   cat $VOICEDIR/silence3.ul "$VOICEDIR/${NEWSTYPE}start10.ul" > $TMPDIR/news.ul
   /usr/sbin/asterisk -rx "rpt $MODE $NODE $TMPDIR/news"

# --- Waiting to send 5 minute announcement
echo "Waiting to send 5 minute warning"
while [ $(date +%H:%M) != $TIME5 ]; do sleep 1; done
   # Start 5 minute message, add 3 second delay to beginning
   cat $VOICEDIR/silence3.ul "$VOICEDIR/${NEWSTYPE}start5.ul" > $TMPDIR/news.ul
   /usr/sbin/asterisk -rx "rpt $MODE $NODE $TMPDIR/news"

# --- Waiting for start time
echo "Waiting for start time"
while [ $(date +%H:%M) != $TIME ]; do sleep 1; done

else

echo "$NEWSTYPE news will start $TIME and use $MODE $MODETYPE mode on node - $NODE"
echo -n "Press any key to start news..."
read -n 1 
fi

# --- 10 Second Countdown
echo
echo "Starting in 10 seconds - Hit Ctrl C to interrupt"
for (( X=10; X >= 1; X-- ))
do
     echo -n "$X "
     sleep 1
done
echo

# --- Send start announcment with a 3 second delay at the beginning
cat $VOICEDIR/silence3.ul "$VOICEDIR/${NEWSTYPE}start.ul" > $TMPDIR/news.ul
/usr/sbin/asterisk -rx "rpt $MODE $NODE $TMPDIR/news"
sleep 10

# --- Start the news broadcast
PART="1"
while [ "$PART" -le "$MAXPART" ]; do
      echo "Playing file $TMPDIR/news.part$PART.ul"
      if [ "$PART" -lt  "$MAXPART" ]; then 
         # Add Station break message with 1 second delay
         cat $TMPDIR/news.part$PART.ul $VOICEDIR/silence1.ul "$VOICEDIR/${NEWSTYPE}continue.ul" > $TMPDIR/news.ul  
         /usr/sbin/asterisk -rx "rpt $MODE $NODE $TMPDIR/news"
         # Break every 2.5 minutes for 20 seconds
         # Note this break has to be long enough for network ID's
         sleep 175
      else
         # Append end message with 2 second delay
         cat $TMPDIR/news.part$PART.ul $VOICEDIR/silence2.ul "$VOICEDIR/${NEWSTYPE}stop.ul" > $TMPDIR/news.ul
         /usr/sbin/asterisk -rx "rpt $MODE $NODE $TMPDIR/news"
         # Terminate script at end of audio
         LENGTH=`soxi -D $TMPDIR/news.ul 2>/dev/null`
         DELAY=${LENGTH/.*} 
         sleep $DELAY
      fi
      let "PART += 1"
done

# --- Remove all audio files downloaded and created by playnews
rm -f $TMPDIR/news*

# Done
exit 0